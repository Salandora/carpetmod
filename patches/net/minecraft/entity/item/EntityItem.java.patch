--- a/net/minecraft/entity/item/EntityItem.java
+++ b/net/minecraft/entity/item/EntityItem.java
@@ -2,6 +2,9 @@
 
 import java.util.UUID;
 import javax.annotation.Nullable;
+
+import carpet.CarpetSettings;
+import net.minecraft.block.BlockShulkerBox;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.MoverType;
@@ -9,6 +12,7 @@
 import net.minecraft.init.Items;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.item.Item;
+import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTUtil;
@@ -37,6 +41,15 @@
     private UUID owner;
     public float hoverStart = (float)(Math.random() * Math.PI * 2.0D);
 
+    //CM
+    @Override
+    public String cm_name() { return "Item"; }
+    public int ssGetAge()
+    {
+        return this.age;
+    }
+
+
     public EntityItem(World worldIn)
     {
         super(EntityType.ITEM, worldIn);
@@ -225,10 +238,28 @@
                     {
                         return other.combineItems(this);
                     }
+                    else if ( // case of two shulkerbox items, both with no tag. We know its same item and both have same tag
+                         (itemstack1.getItem() instanceof ItemBlock) &&
+                         (CarpetSettings.getBool("stackableShulkerBoxes")) &&
+                         (((ItemBlock) itemstack1.getItem()).getBlock() instanceof BlockShulkerBox) &&
+                         (!itemstack1.hasTag() )
+                    )
+                    {
+                        itemstack1.grow(itemstack.getCount());
+                        other.pickupDelay = Math.max(other.pickupDelay, this.pickupDelay);
+                        other.age = Math.min(other.age, this.age);
+                        other.setItem(itemstack1);
+                        this.remove();
+                        return true;
+                    }
                     else if (itemstack1.getCount() + itemstack.getCount() > itemstack1.getMaxStackSize())
                     {
                         return false;
                     }
+                    else if (!itemstack1.isStackable() && !itemstack.isStackable())
+                    {
+                        return false;
+                    }
                     else
                     {
                         itemstack1.grow(itemstack.getCount());
