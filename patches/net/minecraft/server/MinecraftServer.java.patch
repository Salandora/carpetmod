--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -1,5 +1,9 @@
 package net.minecraft.server;
 
+import carpet.CarpetServer;
+import carpet.CarpetSettings;
+import carpet.helpers.TickSpeed;
+import carpet.utils.CarpetProfiler;
 import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -178,6 +182,7 @@
     public final Queue < FutureTask<? >> futureTaskQueue = Queues.newConcurrentLinkedQueue();
     private Thread serverThread;
     private long serverTime = Util.milliTime();
+    public long actualServerTime = Util.milliTime();
     @OnlyIn(Dist.CLIENT)
     private boolean worldIconSet;
     private final IReloadableResourceManager resourceManager = new SimpleReloadableResourceManager(ResourcePackType.SERVER_DATA);
@@ -195,8 +200,12 @@
     private boolean forceWorldUpgrade;
     private float tickTime;
 
+
     public MinecraftServer(@Nullable File anvilFileIn, Proxy serverProxyIn, DataFixer dataFixerIn, Commands commandManagerIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn)
     {
+        //CM
+        CarpetServer.init(this);
+
         this.serverProxy = serverProxyIn;
         this.commandManager = commandManagerIn;
         this.authService = authServiceIn;
@@ -642,24 +651,46 @@
             if (this.init())
             {
                 this.serverTime = Util.milliTime();
-                this.statusResponse.setServerDescription(new TextComponentString(this.motd));
+                // [CM] if statement around -- CustomMOTD
+                if ("_".equals(CarpetSettings.customMOTD))
+                    this.statusResponse.setServerDescription(new TextComponentString(this.motd));
+                else
+                    this.statusResponse.setServerDescription(new TextComponentString(CarpetSettings.customMOTD));
+                // [CM] End -- CustomMOTD
                 this.statusResponse.setVersion(new ServerStatusResponse.Version("1.13.2", 404));
                 this.applyServerIconToResponse(this.statusResponse);
 
                 while (this.serverRunning)
                 {
+                    /* carpet mod commandTick */
+                    //todo check if this check is necessary
+                    if (TickSpeed.time_warp_start_time != 0)
+                    {
+                        if (TickSpeed.continueWarp())
+                        {
+                            this.tick( ()->true );
+                            this.serverTime = Util.milliTime();
+                            this.actualServerTime = Util.milliTime();
+                            this.serverIsRunning = true;
+                        }
+                        continue;
+                    }
                     long i = Util.milliTime() - this.serverTime;
 
                     if (i > 2000L && this.serverTime - this.timeOfLastWarning >= 15000L)
                     {
-                        long j = i / 50L;
+                        long j = i / TickSpeed.mspt;//50L;
                         LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
-                        this.serverTime += j * 50L;
+                        this.serverTime += j * TickSpeed.mspt;//50L;
                         this.timeOfLastWarning = this.serverTime;
                     }
 
                     this.tick(this::func_212379_aT);
-                    this.serverTime += 50L;
+                    //[CM] NOTE: serverTime doesn't indicate current time, but server wannabe-time
+                    // only corrected if it falls behind more than 2000 and manages to catch the warning
+                    // which releases accrued time it falls behind, not 1 tick, but MULTIPLE ticks
+                    this.actualServerTime = Util.milliTime();
+                    this.serverTime += TickSpeed.mspt;//50L;
 
                     while (this.func_212379_aT())
                     {
@@ -782,6 +813,12 @@
     {
         long i = Util.nanoTime();
         ++this.tickCounter;
+        //[CM]
+        CarpetServer.tick(this);
+        if (CarpetProfiler.tick_health_requested != 0L)
+        {
+            CarpetProfiler.start_tick_profiling();
+        }
 
         if (this.startProfiling)
         {
@@ -810,10 +847,12 @@
 
         if (this.tickCounter % 900 == 0)
         {
+            CarpetProfiler.start_section(null, "Autosave");
             this.profiler.startSection("save");
             this.playerList.saveAllPlayerData();
             this.saveAllWorlds(true);
             this.profiler.endSection();
+            CarpetProfiler.end_current_section();
         }
 
         this.profiler.startSection("snooper");
@@ -834,6 +873,10 @@
         this.tickTime = this.tickTime * 0.8F + (float)l / 1000000.0F * 0.19999999F;
         this.profiler.endSection();
         this.profiler.endSection();
+        if (CarpetProfiler.tick_health_requested != 0L)
+        {
+            CarpetProfiler.end_tick_profiling(this);
+        }
     }
 
     public void updateTimeLightAndEntities(BooleanSupplier p_71190_1_)
@@ -905,10 +948,12 @@
             }))[this.tickCounter % 100] = Util.nanoTime() - i;
         }
 
+        CarpetProfiler.start_section(null, "Network");
         this.profiler.endStartSection("connection");
         this.getNetworkSystem().tick();
         this.profiler.endStartSection("players");
         this.playerList.tick();
+        CarpetProfiler.end_current_section();
         this.profiler.endStartSection("tickables");
 
         for (int j = 0; j < this.tickables.size(); ++j)
@@ -1605,6 +1650,12 @@
     {
         return this.serverTime;
     }
+    public void dontPanic()
+    {
+        this.serverTime = Util.milliTime();
+        this.actualServerTime = Util.milliTime();
+        this.serverIsRunning = true;
+    }
 
     public Thread getServerThread()
     {
