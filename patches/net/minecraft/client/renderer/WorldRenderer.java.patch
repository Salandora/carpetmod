--- a/net/minecraft/client/renderer/WorldRenderer.java
+++ b/net/minecraft/client/renderer/WorldRenderer.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer;
 
+import carpet.CarpetSettings;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
@@ -507,10 +508,18 @@
                 this.renderDispatcher = new ChunkRenderDispatcher();
             }
 
+            //[CM] viewDistance override
+            int renderDistance;
+            if (CarpetSettings.clientViewDistance == 0)
+                renderDistance = this.mc.gameSettings.renderDistanceChunks;
+            else {
+                renderDistance = CarpetSettings.clientViewDistance;
+            }
+
             this.displayListEntitiesDirty = true;
             this.cloudsNeedUpdate = true;
             BlockLeaves.setRenderTranslucent(this.mc.gameSettings.fancyGraphics);
-            this.renderDistanceChunks = this.mc.gameSettings.renderDistanceChunks;
+            this.renderDistanceChunks = renderDistance; //[CM] replaced this.mc.gameSettings.renderDistanceChunks with renderDistance
             boolean flag = this.vboEnabled;
             this.vboEnabled = OpenGlHelper.useVbo();
 
@@ -544,7 +553,7 @@
                 this.setTileEntities.clear();
             }
 
-            this.viewFrustum = new ViewFrustum(this.world, this.mc.gameSettings.renderDistanceChunks, this, this.renderChunkFactory);
+            this.viewFrustum = new ViewFrustum(this.world, renderDistanceChunks, this, this.renderChunkFactory); //[CM] replaced this.mc.gameSettings.renderDistanceChunks with renderDistance
 
             if (this.world != null)
             {
@@ -812,7 +821,16 @@
 
     public void setupTerrain(Entity entityIn, float partialTicks, ICamera camera, int frameCount, boolean playerSpectator)
     {
-        if (this.mc.gameSettings.renderDistanceChunks != this.renderDistanceChunks)
+        //[CM] viewDistance override
+        int renderDistance;
+        if (CarpetSettings.clientViewDistance == 0)
+            renderDistance = this.mc.gameSettings.renderDistanceChunks;
+        else {
+            renderDistance = CarpetSettings.clientViewDistance;
+        }
+
+        // [CM] viewDistance override
+        if (renderDistance != this.renderDistanceChunks) //[CM] replaced this.mc.gameSettings.renderDistanceChunks with renderDistance
         {
             this.loadRenderers();
         }
@@ -867,7 +885,7 @@
             this.displayListEntitiesDirty = false;
             this.renderInfos = Lists.newArrayList();
             Queue<WorldRenderer.ContainerLocalRenderInformation> queue = Queues.newArrayDeque();
-            Entity.setRenderDistanceWeight(MathHelper.clamp((double)this.mc.gameSettings.renderDistanceChunks / 8.0D, 1.0D, 2.5D));
+            Entity.setRenderDistanceWeight(MathHelper.clamp((double)renderDistance / 8.0D, 1.0D, 2.5D)); //[CM] replaced this.mc.gameSettings.renderDistanceChunks with renderDistance
             boolean flag1 = this.mc.renderChunksMany;
 
             if (renderchunk != null)
@@ -1702,8 +1720,16 @@
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         WorldBorder worldborder = this.world.getWorldBorder();
-        double d0 = (double)(this.mc.gameSettings.renderDistanceChunks * 16);
 
+        //[CM] viewDistance override
+        int renderDistance;
+        if (CarpetSettings.clientViewDistance == 0)
+            renderDistance = this.mc.gameSettings.renderDistanceChunks;
+        else {
+            renderDistance = CarpetSettings.clientViewDistance;
+        }
+        double d0 = (double)(renderDistance * 16); //[CM] replaced this.mc.gameSettings.renderDistanceChunks with renderDistance
+
         if (!(entityIn.posX < worldborder.maxX() - d0) || !(entityIn.posX > worldborder.minX() + d0) || !(entityIn.posZ < worldborder.maxZ() - d0) || !(entityIn.posZ > worldborder.minZ() + d0))
         {
             double d1 = 1.0D - worldborder.getClosestDistance(entityIn) / d0;
