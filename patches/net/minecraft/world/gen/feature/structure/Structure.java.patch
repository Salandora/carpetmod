--- a/net/minecraft/world/gen/feature/structure/Structure.java
+++ b/net/minecraft/world/gen/feature/structure/Structure.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.gen.feature.structure;
 
+import carpet.CarpetSettings;
 import com.google.common.collect.Lists;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
@@ -225,7 +226,7 @@
 
     private StructureStart getStructureStart(IWorld worldIn, IChunkGenerator <? extends IChunkGenSettings > generator, SharedSeedRandom rand, long packedChunkPos)
     {
-        if (!generator.getBiomeProvider().hasStructure(this))
+        if (!generator.getBiomeProvider().hasStructure(this) && !CarpetSettings.skipGenerationChecks)
         {
             return NO_STRUCTURE;
         }
@@ -289,4 +290,101 @@
     protected abstract String getStructureName();
 
     public abstract int getSize();
+
+    public boolean plopAnywhere(IWorld world, BlockPos pos)
+    {
+        return plopAnywhere(world, pos, world.getChunkProvider().getChunkGenerator());
+    }
+    public boolean plopAnywhere(IWorld world, BlockPos pos, IChunkGenerator<? extends IChunkGenSettings> generator)
+    {
+        CarpetSettings.skipGenerationChecks = true;
+        try
+        {
+            SharedSeedRandom rand = new SharedSeedRandom(world.getRandom().nextInt());
+            int j = pos.getX() >> 4;
+            int k = pos.getZ() >> 4;
+            long chId = ChunkPos.asLong(j, k);
+            StructureStart structurestart = forceStructureStart(world, generator, rand, chId);
+            if (structurestart == NO_STRUCTURE)
+            {
+                CarpetSettings.skipGenerationChecks = false;
+                return false;
+            }
+            generator.getStructurePositionToReferenceMap(this).computeIfAbsent(chId, (x) -> new LongOpenHashSet()).add(chId);
+            world.getChunkProvider().provideChunkOrPrimer(j, k, true).addStructureReference(this.getStructureName(), chId);
+            MutableBoundingBox box = structurestart.getBoundingBox();
+            structurestart.generateStructure(
+                    world,
+                    rand,
+                    new MutableBoundingBox(
+                            pos.getX() - this.getSize()*16,
+                            pos.getZ() - this.getSize()*16,
+                            pos.getX() + (this.getSize()+1)*16,
+                            pos.getZ() + (1+this.getSize())*16),
+                    new ChunkPos(j, k)
+            );
+            structurestart.notifyPostProcessAt(new ChunkPos(j, k));
+
+            int i = this.getSize();
+            for (int k1 = j - i; k1 <= j + i; ++k1)
+            {
+                for (int l1 = k - i; l1 <= k + i; ++l1)
+                {
+                    if (k1 == j && l1 == k) continue;
+                    long nbchkid = ChunkPos.asLong(k1, l1);
+                    if (box.intersectsWith(k1<<4, l1<<4, (k1<<4) + 15, (l1<<4) + 15))
+                    {
+                        generator.getStructurePositionToReferenceMap(this).computeIfAbsent(nbchkid, (__) -> new LongOpenHashSet()).add(chId);
+                        world.getChunkProvider().provideChunkOrPrimer(k1, l1, true).addStructureReference(this.getStructureName(), chId);
+                        structurestart.notifyPostProcessAt(new ChunkPos(k1, l1));
+                    }
+                }
+            }
+        }
+        catch (Exception ignored)
+        {
+            CarpetSettings.LOG.error("Unknown Exception while plopping structure: "+ignored);
+            ignored.printStackTrace();
+            CarpetSettings.skipGenerationChecks = false;
+            return false;
+        }
+        CarpetSettings.skipGenerationChecks = false;
+        return true;
+    }
+
+    private StructureStart forceStructureStart(IWorld worldIn, IChunkGenerator <? extends IChunkGenSettings > generator, SharedSeedRandom rand, long packedChunkPos)
+    {
+
+        Long2ObjectMap<StructureStart> long2objectmap = generator.getStructureReferenceToStartMap(this);
+        StructureStart structurestart = long2objectmap.get(packedChunkPos);
+
+        if (structurestart != null)
+        {
+            return structurestart; // structure already exist, will skip
+        }
+        ChunkPos chunkpos = new ChunkPos(packedChunkPos);
+        IChunk ichunk = worldIn.getChunkProvider().provideChunkOrPrimer(chunkpos.x, chunkpos.z, false);
+
+        if (ichunk != null)
+        {
+            structurestart = ichunk.getStructureStart(this.getStructureName());
+
+            if (structurestart != null)
+            {
+                long2objectmap.put(packedChunkPos, structurestart);
+                return structurestart;
+            }
+        }
+
+        StructureStart structurestart1 = this.makeStart(worldIn, generator, rand, chunkpos.x, chunkpos.z);
+        structurestart = structurestart1.isSizeableStructure() ? structurestart1 : NO_STRUCTURE;
+
+        if (structurestart.isSizeableStructure())
+        {
+            worldIn.getChunkProvider().provideChunkOrPrimer(chunkpos.x, chunkpos.z, true).putStructureStart(this.getStructureName(), structurestart);
+        }
+
+        long2objectmap.put(packedChunkPos, structurestart);
+        return structurestart;
+    }
 }
